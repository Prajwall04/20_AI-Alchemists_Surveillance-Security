# -*- coding: utf-8 -*-
"""Gradient_Hackathon_Steganography_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rIA5rNdc8G2lJ-LNg9V3_opQRFhdCJtO
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("lijiyu/bossbase")

print("Path to dataset files:", path)

import os
import numpy as np
from PIL import Image
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from imblearn.under_sampling import RandomUnderSampler
import joblib

# Step 1: Feature Extraction using LSB
def extract_lsb_features(image_path):
    image = Image.open(image_path).resize((128, 128)).convert('L')
    pixels = np.array(image)
    lsb = pixels & 1
    return lsb.flatten()

# Step 2: Load Dataset
def load_dataset(cover_folder, stego_folder, limit=None):
    features, labels = [], []
    for folder, label in [(cover_folder, 0), (stego_folder, 1)]:
        for filename in os.listdir(folder)[:limit]:
            if filename.endswith('.png'):
                image_path = os.path.join(folder, filename)
                features.append(extract_lsb_features(image_path))
                labels.append(label)
    return np.array(features), np.array(labels)

# Step 3: Balance the Dataset
def balance_dataset(features, labels):
    rus = RandomUnderSampler(random_state=42)
    return rus.fit_resample(features, labels)

# Paths to dataset folders
cover_folder = "/root/.cache/kagglehub/datasets/lijiyu/bossbase/versions/1/boss_256_0.4/cover"
stego_folder = "/root/.cache/kagglehub/datasets/lijiyu/bossbase/versions/1/boss_256_0.4/stego"
cover_folder2 = "/root/.cache/kagglehub/datasets/lijiyu/bossbase/versions/1/boss_256_0.4_test/cover"
stego_folder2 = "/root/.cache/kagglehub/datasets/lijiyu/bossbase/versions/1/boss_256_0.4_test/stego"
model_output_path = "steganography_detection_model.pkl"

# Load and balance datasets
print("Loading and processing dataset...")
features, labels = load_dataset(cover_folder, stego_folder)
features, labels = balance_dataset(features, labels)
features2, labels2 = load_dataset(cover_folder2, stego_folder2)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(features)
X_test = scaler.transform(features2)
y_train, y_test = labels, labels2

# Train Random Forest model
classifier = RandomForestClassifier(n_estimators=200, random_state=42)
classifier.fit(X_train, y_train)

# Evaluate model
y_pred = classifier.predict(X_test)
print("Detection Model Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Save model
joblib.dump(classifier, model_output_path)
print(f"Model saved at: {model_output_path}")

image = '/content/download.png'
arr = extract_lsb_features(image)
classifier.predict(arr.reshape(1, -1))